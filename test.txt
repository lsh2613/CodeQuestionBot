# 인프라형 코드의 장점

이제 IaC의 다양한 특징을 모두 살펴보았으므로 물어볼 좋은 질문은 '왜 굳이 귀찮게 해야 합니까?'입니다. 왜 수많은 새로운 언어와 도구를 배우고 더 많은 코드를 관리해야 합니까? 대답은 코드가 강력하다는 것입니다. 수동 작업을 코드로 전환하는 선행 투자의 대가로 소프트웨어 제공 능력이 크게 향상됩니다. 2016년 DevOps 현황 보고서에 따르면 IaC와 같은 DevOps 방식을 사용하는 조직은 200배 더 자주 배포하고, 24배 더 빠르게 오류를 복구하며, 리드 타임이 2,555배 더 짧습니다. 인프라가 코드로 정의되면 다양한 소프트웨어 엔지니어링 방법을 사용하여 다음을 포함한 소프트웨어 제공 프로세스를 획기적으로 개선할 수 있습니다.

- 셀프서비스
코드를 수동으로 배포하는 대부분의 팀에는 배포 작업을 수행하는 데 필요한 모든 정보를 알고 프로덕션에 액세스할 수 있는 유일한 시스템 관리자가 소수 있습니다. 이는 회사가 성장함에 따라 주요 병목 현상이 됩니다. 인프라가 코드로 정의된 경우 전체 배포 프로세스를 자동화할 수 있으며 개발자는 필요할 때마다 자체 배포를 시작할 수 있습니다.
- 속도와 안전성
배포 프로세스가 자동화되면 자동화된 프로세스가 더 일관되고 반복 가능하며 수동 오류가 발생하지 않는다는 점을 고려하면 컴퓨터가 사람보다 훨씬 빠르고 안전하게 배포 단계를 수행할 수 있으므로 훨씬 더 빨라질 것입니다.
- 공유 정신
인프라 상태가 단일 시스템 관리자의 머리에 잠겨 있고 해당 시스템 관리자가 휴가를 가거나 회사를 떠나거나 버스에 치인 경우 갑자기 자신의 인프라를 더 이상 관리할 수 없다는 것을 깨닫게 될 수 있습니다. 반면, 인프라가 코드로 정의된 경우 인프라 상태는 누구나 읽을 수 있는 소스 파일에 있습니다. 즉, IaC는 문서 역할을 하여 시스템 관리자가 휴가를 떠나더라도 조직의 모든 사람이 작업 방식을 이해할 수 있도록 해줍니다.
- 버전 관리
IaC 소스 파일을 버전 제어에 저장할 수 있습니다. 즉, 인프라의 전체 기록이 이제 커밋 로그에 캡처됩니다. 이는 문제 디버깅을 위한 강력한 도구가 됩니다. 문제가 발생할 때마다 첫 번째 단계는 커밋 로그를 확인하고 인프라에서 변경된 내용을 찾는 것이고, 두 번째 단계는 간단히 되돌려 문제를 해결하는 것일 수 있기 때문입니다. 이전의 정상적으로 동작한 버전의 IaC 코드로 복원할 수 있습니다.
- 검증 
인프라 상태가 코드에 정의된 경우 모든 단일 변경 사항에 대해 코드 검토를 수행하고, 자동화된 테스트 모음을 실행하고, 정적 분석 도구를 통해 코드를 전달할 수 있습니다. 이 모든 방법은 결함의 위험을 크게 줄이는 것으로 알려져 있습니다.
- 재사용
인프라를 재사용 가능한 모듈로 패키징하여 모든 환경의 모든 제품에 대한 모든 배포를 처음부터 수행하는 대신 알려지고 문서화되었으며 실전 테스트를 거친 부분을 기반으로 구축할 수 있습니다.
- 행복
IaC를 사용해야 하는 또 다른 매우 중요하면서도 종종 간과되는 이유가 있습니다. 바로 행복입니다. 코드를 배포하고 인프라를 수동으로 관리하는 것은 반복적이고 지루합니다. 개발자와 시스템 관리자는 이러한 유형의 작업에 창의성, 도전, 인정이 전혀 포함되지 않기 때문에 분개합니다. 몇 달 동안 코드를 완벽하게 배포할 수 있으며, 어느 날 코드를 엉망으로 만들기 전까지는 아무도 눈치 채지 못할 것입니다. 이는 스트레스가 많고 불쾌한 환경을 조성합니다. IaC는 컴퓨터가 가장 잘하는 일(자동화)을 수행하고 개발자가 가장 잘하는 일(코딩)을 수행할 수 있도록 하는 더 나은 대안을 제공합니다.

이제 IaC가 왜 중요한지 이해했으므로 다음 질문은 Terraform이 최고의 IaC 도구인지 여부입니다. 이에 대한 답을 얻기 위해 먼저 Terraform의 작동 방식에 대한 간단한 입문서를 살펴본 다음 이를 Chef, Puppet 및 Ansible과 같은 다른 인기 있는 IaC 옵션과 비교해 보겠습니다.
