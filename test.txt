# 마스터 서버의 유무

기본적으로 Chef 및 Puppet에서는 인프라 상태를 저장하고 업데이트를 배포하기 위해 마스터 서버를 실행해야 합니다. 인프라에서 무언가를 업데이트하려고 할 때마다 클라이언트(예: 명령줄 도구)를 사용하여 마스터 서버에 새 명령을 실행하면 마스터 서버는 업데이트를 다른 모든 서버나 다른 서버로 푸시합니다. 서버는 정기적으로 마스터 서버에서 최신 업데이트를 가져옵니다.

마스터 서버는 몇 가지 장점을 제공합니다. 첫째, 인프라 상태를 보고 관리할 수 있는 단일 중앙 장소입니다. 많은 구성 관리 도구는 진행 상황을 더 쉽게 확인할 수 있도록 마스터 서버에 웹 인터페이스(예: Chef 콘솔, Puppet Enterprise 콘솔)도 제공합니다. 둘째, 일부 마스터 서버는 백그라운드에서 지속적으로 실행되고 구성을 적용할 수 있습니다. 이렇게 하면 누군가가 서버를 수동으로 변경하는 경우 마스터 서버가 해당 변경 사항을 되돌려 구성 드리프트를 방지할 수 있습니다.

그러나 마스터 서버를 실행하려면 다음과 같은 몇 가지 심각한 단점이 있습니다.

- 추가 인프라
마스터를 실행하려면 추가 서버 또는 추가 서버 클러스터(고가용성과 확장성을 위해)를 배포해야 합니다.
- 유지보수
마스터 서버를 유지 관리, 업그레이드, 백업, 모니터링 및 확장해야 합니다.
- 보안
클라이언트가 마스터 서버와 통신할 수 있는 방법과 마스터 서버가 다른 모든 서버와 통신할 수 있는 방법을 제공해야 합니다. 이는 일반적으로 추가 포트를 열고 추가 인증 시스템을 구성하는 것을 의미합니다. 공격자가 접근할 수 있는 표면적이 늘어납니다.

Chef와 Puppet은 일반적으로 정기적인 일정(예: 5분마다 실행되는 cron 작업)에 따라 각 서버에서 에이전트 소프트웨어만 실행하고 이를 사용하여 버전 관리의 최신 업데이트(마스터 서버가 아닌) 이렇게 하면 움직이는 부품의 수가 크게 줄어들지만 다음 섹션에서 설명하겠지만 특히 서버를 프로비저닝하고 서버에 에이전트 소프트웨어를 설치하는 방법에 대해 여전히 답이 없는 질문이 많이 남아 있습니다. 

Ansible, CloudFormation, Heat, Terraform 및 Pulumi는 모두 기본적으로 마스터가 없습니다. 또는 더 정확하게 말하면 일부는 마스터 서버에 의존하지만 이는 이미 사용 중인 인프라의 일부이지 관리해야 하는 추가 부분이 아닙니다. 예를 들어 Terraform은 클라우드 공급자의 API를 사용하여 클라우드 공급자와 통신하므로 어떤 의미에서 API 서버는 추가 인프라나 추가 인증 메커니즘이 필요하지 않다는 점을 제외하면 마스터 서버입니다(예: API 키만 사용). Ansible은 SSH를 통해 각 서버에 직접 연결하는 방식으로 작동하므로 추가 인프라를 실행하거나 추가 인증 메커니즘을 관리할 필요가 없습니다(즉, SSH 키만 사용하면 됩니다).
