# DevOps란?

그리 멀지 않은 과거에는 소프트웨어 회사를 세우려면 많은 하드웨어도 관리해야 했습니다. 랙을 설치하고, 서버를 로드하고, 배선을 연결하고, 냉각 장치를 설치하고, 중복 전원 시스템을 구축하는 등의 작업을 수행했습니다. 소프트웨어 개발을 전담하는 일반적으로 개발자(“Devs”)라고 하는 하나의 팀과 이 하드웨어 관리를 전담하는 운영(“Ops”)이라는 별도의 팀을 갖는 것이 합리적이었습니다.

일반적인 개발 팀은 애플리케이션을 구축하고 이를 운영 팀에 "경계 너머로 던집니다". 그런 다음 해당 애플리케이션을 배포하고 실행하는 방법을 파악하는 것은 Ops의 몫이었습니다. 대부분 이 작업은 수동으로 수행되었습니다. 왜냐하면 하드웨어를 물리적으로 연결하는 작업(예: 서버 랙 설치, 네트워크 케이블 연결)과 관련이 있었기 때문입니다. 그러나 애플리케이션 및 해당 종속성 설치와 같이 Ops가 소프트웨어에서 수행한 작업도 종종 서버에서 명령을 수동으로 실행하여 수행되었습니다. 

이것은 한동안 잘 작동하지만 회사가 성장함에 따라 결국 문제에 직면하게 됩니다. 일반적으로 다음과 같이 진행됩니다. 릴리스는 수동으로 수행되기 때문에 서버 수가 증가함에 따라 릴리스는 느리고 고통스럽고 예측할 수 없게 됩니다. Ops 팀은 때때로 실수를 하기 때문에 눈송이 서버(snowflake server)로 끝나게 됩니다. 각 서버는 다른 서버와 미묘하게 다른 구성을 갖습니다(구성 드리프트라고 알려진 문제). 결과적으로 버그 수가 증가합니다. 개발자들은 어깨를 으쓱하며 “내 컴퓨터에서는 작동해요!”라고 말하지만 가동 중단 및 다운타임이 더 자주 발생합니다. 매 릴리스 후 오전 3시에 울리는 호출기에 지친 Ops 팀은 릴리스 주기를 일주일에 한 번으로 줄입니다. 그런 다음 한 달에 한 번. 그러면 6개월에 한 번씩. 2년마다 출시되기 몇 주 전에 팀은 모든 프로젝트를 하나로 병합하려고 시도하기 시작하여 병합 충돌이 엄청나게 발생합니다. 누구도 릴리스 브랜치를 안정화할 수 없습니다. 사일로 형태의 팀은 서로를 비난하기 시작합니다. 회사는 망해 가는 것입니다.

 요즘에는 근본적인 변화가 일어나고 있습니다. 자체 데이터 센터를 관리하는 대신 많은 기업이 Amazon Web Services(AWS), Microsoft Azure, Google Cloud Platform(GCP)과 같은 서비스를 활용하여 클라우드로 전환하고 있습니다. 많은 Ops 팀은 하드웨어에 막대한 투자를 하는 대신 Chef, Puppet, Terraform, Docker, Kubernetes와 같은 도구를 사용하여 소프트웨어 작업에 모든 시간을 쏟고 있습니다. 서버를 랙에 설치하고 네트워크 케이블을 연결하는 대신 많은 시스템 관리자가 코드를 작성하고 있습니다. 결과적으로 Dev와 Ops 모두 대부분의 시간을 소프트웨어 작업에 소비하며 두 팀 간의 구분이 모호해집니다. 애플리케이션 코드를 담당하는 별도의 개발팀과 운영 코드를 담당하는 운영팀을 갖는 것이 여전히 타당할 수 있지만, 개발팀과 운영팀이 더욱 긴밀하게 협력해야 한다는 점은 분명합니다. DevOps 운동이 시작된 것입니다. DevOps는 팀 이름이나 직위 또는 특정 기술이라기 보다는 일련의 프로세스, 아이디어 및 기술입니다. DevOps에 대한 정의는 사람마다 조금씩 다르지만 이 책에서는 다음과 같이 설명하겠습니다.

DevOps의 목표는 소프트웨어 제공을 훨씬 더 효율적으로 만드는 것입니다.

며칠간의 병합 악몽 대신 코드를 지속적으로 통합하고 항상 배포 가능한 상태로 유지합니다. 한 달에 한 번 코드를 배포하는 대신 하루에 수십 번 또는 커밋이 완료될 때마다 코드를 배포할 수 있습니다. 그리고 지속적인 중단과 가동 중지 시간 대신 탄력적인 자가 치유 시스템을 구축하고 모니터링 및 경고를 사용하여 자동으로 해결할 수 없는 문제를 포착합니다. DevOps 혁신을 거친 기업의 결과는 놀랍습니다. 예를 들어, Nordstrom은 DevOps 방식을 조직에 적용한 후 매월 제공하는 기능 수를 100% 늘리고, 결함을 50% 줄이고, 리드 타임(아이디어가 떠오르는 데 걸리는 시간)을 줄일 수 있다는 사실을 발견했습니다. 프로덕션에서 코드 실행을 60% 줄이고, 프로덕션 사고 건수를 60%에서 90%로 줄입니다. HP의 LaserJet 펌웨어 사업부가 DevOps 방식을 사용하기 시작한 후 개발자가 새로운 기능을 개발하는 데 소요하는 시간은 5%에서 40%로 늘어났고 전체 개발 비용은 40% 감소했습니다. Etsy는 DevOps 방식을 사용하여 수많은 중단을 초래하는 스트레스가 많고 빈번하지 않은 배포에서 중단을 훨씬 적게 하면서 하루에 25~50회 배포하는 방식으로 전환했습니다.

DevOps 운동에는 문화, 자동화, 측정, 공유(약어로 CAMS라고도 함)라는 네 가지 핵심 가치가 있습니다. 이 책은 DevOps에 대한 포괄적인 개요를 다루려는 것이 아니므로, 자동화라는 가치 중 하나에만 초점을 맞추겠습니다. 목표는 가능한 많은 소프트웨어 제공 프로세스를 자동화하는 것입니다. 이는 웹 페이지를 클릭하거나 수동으로 셸 명령을 실행하는 것이 아니라 코드를 통해 인프라를 관리한다는 의미입니다. 이는 일반적으로 코드형 인프라(Infrastructure as Code)라고 불리는 개념입니다.
