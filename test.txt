# 애드훅 (Ad hoc) 스크립트

모든 것을 자동화하는 가장 간단한 접근 방식은 임시 스크립트를 작성하는 것입니다. 수동으로 수행하던 작업을 개별 단계로 나누고, 선호하는 스크립트 언어(예: Bash, Ruby, Python)를 사용하여 각 단계를 코드로 정의하고, 다음과 같이 서버에서 해당 스크립트를 실행합니다. 

예를 들어 다음은 종속성을 설치하고, Git 저장소에서 일부 코드를 확인하고, Apache 웹 서버를 실행하여 웹 서버를 구성하는 setup-webserver.sh라는 Bash 스크립트입니다.

```bash
# Update the apt-get cache 
sudo apt-get update 
# Install PHP and Apache 
sudo apt-get install -y php apache2 
# Copy the code from the repository 
sudo git clone https://github.com/brikis98/php-app.git /var/www/html/app 
# Start Apache 
sudo service apache2 start
```

임시 스크립트의 가장 큰 장점이자 단점은 널리 사용되는 범용 프로그래밍 언어를 사용할 수 있고 원하는 대로 코드를 작성할 수 있다는 것입니다. IaC용으로 특별히 제작된 도구는 복잡한 작업을 수행하기 위한 간결한 API를 제공하는 반면, 범용 프로그래밍 언어를 사용하는 경우 모든 작업에 대해 완전히 사용자 정의 코드를 작성해야 합니다. 또한 IaC용으로 설계된 도구는 일반적으로 코드에 특정 구조를 적용하는 반면, 범용 프로그래밍 언어를 사용하면 각 개발자가 자신의 스타일을 사용하고 다른 작업을 수행합니다. 이러한 문제는 Apache를 설치하는 4줄 스크립트에는 큰 문제가 되지 않지만 임시 스크립트를 사용하여 수십 개의 서버, 데이터베이스, 로드 밸런서, 네트워크 구성 등을 관리하려고 하면 문제가 발생합니다. Bash 스크립트의 대규모 저장소를 유지해야 했던 적이 있다면 거의 항상 유지 관리할 수 없는 스파게티 코드가 엉망이 된다는 것을 알고 계실 것입니다. 임시 스크립트는 소규모의 일회성 작업에 적합하지만 모든 인프라를 코드로 관리하려면 해당 작업을 위해 특별히 제작된 IaC 도구를 사용해야 합니다.
